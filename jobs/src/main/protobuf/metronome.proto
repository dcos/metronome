syntax = "proto2";

package dcos.metronome;

option java_package = "dcos.metronome";
option java_outer_classname = "Protos";

/**
 * Key, value pair used to store free form user-data.
 */
message Label {
  optional string key = 1;
  optional string value = 2;
}

/**
 * A generic (key, value) pair used in various places for parameters.
 */
message Parameter {
  required string key = 1;
  required string value = 2;
}

message JobHistory {
  optional string job_spec_id = 1;
  optional int64 success_count = 2;
  optional int64 failure_count = 3;
  optional int64 last_success_at = 4;
  optional int64 last_failure_at = 5;

  message JobRunInfo {
    optional JobRun.Id job_run_id = 1;
    optional int64 created_at = 2;
    optional int64 finishedAt = 3;
    repeated string tasks = 4;
  }
  repeated JobRunInfo successful_runs = 6;
  repeated JobRunInfo failed_runs = 7;
}

message JobRun {
  message Id {
    optional string jobId = 1;
    optional string runId = 2;
  }
  optional Id id = 1;

  optional JobSpec jobSpec = 2;

  enum Status {
    UNKNOWN = 1;
    STARTING = 2;
    ACTIVE = 3;
    SUCCESS = 4;
    FAILED = 5;
  }
  optional Status status = 3;

  optional int64 createdAt = 4;
  optional int64 finishedAt = 5;

  message JobRunTask {
    enum Status {
      UNKNOWN = 1;
      TASK_CREATED = 2;
      TASK_STAGING = 3;
      TASK_STARTING = 4;
      TASK_RUNNING = 5;
      TASK_FINISHED = 6;
      TASK_FAILED = 7;
      TASK_KILLED = 8;
    }

    optional string id = 1;
    optional int64 startedAt = 2;
    optional int64 completedAt = 3;
    optional Status status = 4;
  }
  repeated JobRunTask tasks = 6;
  optional int64 starting_deadline_seconds = 7;
}

message JobSpec {
  optional string id = 1;
  optional string description = 2;
  repeated Label labels = 3;

  message ScheduleSpec {
    optional string id = 1;
    optional string schedule = 2;
    optional string tz = 3;
    optional int64 startingDeadline = 4;

    enum ConcurrencyPolicy {
      UNKNOWN = 1;
      ALLOW = 2;
      FORBID = 3;
    }
    optional ConcurrencyPolicy concurrency_policy = 5;

    optional bool enabled = 6;
  }
  repeated ScheduleSpec schedules = 5;

  message RunSpec {
    optional double cpus = 1;
    optional double mem = 2;
    optional double disk = 3;
    optional string cmd = 4;
    repeated string arguments = 5;
    optional string user = 6;
    optional int32 gpus = 18;

    /**
     * Key, value pair used to store environment variables.
     */
    message EnvironmentVariable {
      optional string key = 1;
      optional string value = 2;
    }
    repeated EnvironmentVariable environment = 7;

    message PlacementSpec {
      message Constraint {
        optional string attribute = 1;

        enum Operator {
          UNKNOWN = 1;
          // Tasks will be clustered, i.e. all tasks need to have the same value. If value is not set, any value will be
          // accepted for the first task, and subsequent tasks must use that same value.
          EQ = 2;
          // Field must match the regex given by value.
          LIKE = 3;
          // Field must not match the regex given by value.
          UNLIKE = 4;
          // Field must be the specified value
          IS = 6;
        }
        optional Operator operator = 2;
        optional string value = 3;
      }

      repeated Constraint constraints = 1;
    }
    optional PlacementSpec placement = 8;

    message Artifact {
      optional string url = 1;
      optional bool extract = 2;
      optional bool executable = 3;
      optional bool cache = 4;
    }
    repeated Artifact artifacts = 9;

    optional int64 max_launch_delay = 10;

    message DockerSpec {
      optional string image = 1;
      // With this flag set to true, the docker containerizer will
      // pull the docker image from the registry even if the image
      // is already downloaded on the agent.
      optional bool force_pull_image = 2;

      optional bool privileged = 3 [default = false];

      repeated Parameter parameters = 4;
    }
    optional DockerSpec docker = 11;

    message Volume {
      // Path pointing to a directory or file in the container. If the
      // path is a relative path, it is relative to the container work
      // directory. If the path is an absolute path, that path must
      // already exist.
      optional string container_path = 1;

      // Absolute path pointing to a directory or file on the host or a
      // path relative to the container work directory.
      optional string host_path = 2;

      enum Mode {
        UNKNOWN = 1;
        RO = 2; // read-only.
        RW = 3; // read-write.
      }
      optional Mode mode = 3;

      optional string secret = 4;
    }
    repeated Volume volumes = 12;

    message RestartSpec {
      enum RestartPolicy {
        UNKNOWN = 1;
        NEVER = 2;
        ON_FAILURE = 3;
      }
      optional RestartPolicy policy = 1;
      optional int64 activeDeadline = 2;
    }
    optional RestartSpec restart = 13;

    // mesos kill policy https://github.com/apache/mesos/blob/master/include/mesos/mesos.proto#L625
    // for some reason referred to as taskKillGracePeriod in marathon.
    // https://github.com/mesosphere/marathon/blob/releases/1.3/src/main/scala/mesosphere/marathon/state/AppDefinition.scala#L79
    // AND taskKillGracePeriodSeconds
    // https://github.com/mesosphere/marathon/blob/releases/1.3/docs/docs/rest-api/public/api/v2/schema/AppDefinition.json
    // int64 in mesos and int32 in marathon... going with int64
    optional int64 task_kill_grace_period_seconds = 14;

    // key value pair used to store secrets path
    message EnvironmentVariableSecret {
      optional string name = 1;
      optional string secretId = 2;
    }
    repeated EnvironmentVariableSecret environmentSecrets = 15;

    // key value pair used to store secrets path
    message Secret {
      optional string id = 1;
      optional string source = 2;
    }
    repeated Secret secrets = 16;

    message UcrSpec {
      message Image {
        optional string id = 1;
        optional string kind = 2 [default = "docker"];
        // With this flag set to true, the docker containerizer will
        // pull the docker image from the registry even if the image
        // is already downloaded on the agent.
        optional bool force_pull = 3;
      }

      optional Image image = 1;
      optional bool privileged = 2 [default = false];
    }
    optional UcrSpec ucr = 17;
    repeated NetworkDefinition networks = 19;
  }

  optional RunSpec run = 6;

  message Dependency {
    optional string id = 1;
  }
  repeated Dependency dependencies = 20;
}

message NetworkDefinition {
  enum Mode {
    HOST = 1;
    CONTAINER = 2;
    BRIDGE = 3;
  }

  optional Mode mode = 1;
  optional string name = 2; // for CONTAINER mode only
  repeated Label labels = 3; // for CONTAINER, BRIDGE modes only
}
