#!/usr/bin/env amm

// Get a logging backend into classpath.
import $ivy.`org.slf4j:slf4j-simple:1.7.25`

import ammonite.ops._
import ammonite.ops.ImplicitWd._
import java.util.concurrent.TimeUnit
import scala.concurrent.duration._
import scala.util.control.NonFatal
import scala.util.Try

import $file.awsClient
import $file.fileUtil
import $file.githubClient
import $file.utils

val PACKAGE_DIR: Path = pwd / 'target / 'universal

/**
 * Compile Metronome and run unit.
 */
@main
def compileAndTest(logFileName: String): Unit = utils.stage("Compile and Test") {

  def run(cmd: String *) = utils.runWithTimeout(1.hour, logFileName)(cmd)

  run("sbt", "clean", "test")

  checkSystemIntegrationTests(logFileName)
}

@main
def checkSystemIntegrationTests(logFileName: String): Unit = {
  def run(cmd: String *) = utils.runWithTimeout(30.minutes, logFileName)(cmd)
  run("flake8", "--count", "--max-line-length=120", "tests/system")
}

/**
 * Compresses sandboxes and logs.
 *
 * @param logFileName Name of log file.
 */
@main
def zipSandboxLogs(logFileName: String = "ci.log"): Unit = {
  println(s"zipping file: $logFileName")
  Try(%("tar", "-zcf", s"$logFileName.tar.gz", "--remove-files", logFileName))
}

@main
/**
 * Upload Metronome tgz tarballs and its sha1 checksum to S3.
 *
 * @param version The version to upload.
 * @param buildLocation subfolder location to upload tarball to. Example: "builds", "release"
 * @return Artifact description if it was uploaded.
 */
def uploadTarballToS3(buildLocation: String): Option[awsClient.Artifact] = utils.stage("Upload Packages") {
  import scala.collection.breakOut

  PACKAGE_DIR.toIO.listFiles.filter(f => f.getName.endsWith(".tgz"))
    .headOption.flatMap(file => awsClient.archiveArtifact(Path(file), awsClient.s3PathFor(buildLocation)))
}

/**
 * Creates the zip and txz files of the Metronome runnable package with their
 * associated sha1
 *
 * @return version of build.
 */
@main
def createPackages(): utils.SemVer = utils.stage("Package") {
  val result = %%('sbt, "universal:packageZipTarball")

  val version = %%("./version").out.string.trim
  val gitSha = %%("./version", "commit").out.string.trim

  println(s"Built tarballs for Metronome $version.")
  utils.SemVer(version, gitSha)
}

/**
 * While 'sbt, "docker:publishLocal" will create a docker.  The project is NOT setup
 * properly (proper naming "mesosphere/metronome") nor do we currently support metronome
 * in the universe.
 */

/**
 * The pipeline target for GitHub pull request builds. It wraps other targets
 * and does some additional reporting to GitHub.
 */
def asPullRequest(run: => (utils.SemVer, Option[awsClient.Artifact])): Unit = {
  val pullNumber: String = sys.env.getOrElse("CHANGE_ID", throw new IllegalArgumentException("No CHANGE_ID was defined."))
  val buildUrl: String = sys.env.getOrElse("BUILD_URL", throw new IllegalArgumentException("No BUILD_URL was defined."))
  val buildTag: String = sys.env.getOrElse("BUILD_TAG", "here")

  try {
    githubClient.reject(pullNumber, buildUrl, buildTag)
    val (_, maybeArtifact) = run
    githubClient.reportSuccess(pullNumber, buildUrl, buildTag, maybeArtifact)
  } catch {
    case NonFatal(e) =>
      githubClient.reportFailure(pullNumber, buildUrl, buildTag, e.getMessage())
      throw e
  }
}

/**
 * Run the main pipeline.
 *
 * @return Version and artifact description of Metronome build.
 */
@main
def build(): utils.SemVer = {

  val logFileName = s"ci-${sys.env.getOrElse("BUILD_TAG", "run")}.log"
  try {
    compileAndTest(logFileName)
  } finally {
    zipSandboxLogs(logFileName)    // Try to archive logs in any case
  }
  val version = createPackages()
  version
}

/**
 * The main pipeline target for builds on Jenkins.
 *
 * @return Version and artifact description of Metronome build.
 */
@main
def jenkins(): Unit = {
  if(utils.isPullRequest) {
    asPullRequest {
      val version = build()
      // Uploads
      println(s"Built package with version $version")
      val artifact = uploadTarballToS3(s"builds/$version")
      (version, artifact)
    }
  } else {
    val version = build()
    uploadTarballToS3(s"builds/$version")
  }
}


/**
 * Executes the Community Release which includes:
 *
 *  1. tarball with version details
 *  Unlike the marathon build, the version details are currently expected to be
 * in the metronome project.   When a rev sha is provided for the build, the version
 * of that build will be checked against the requestedVersion number.  It will fail
 * the build if the version does not match.    However this has the potential of
 * being more error prone in that multiple commits could build the same version.  So
 * the build will also fail if the S3 location is currently occupied by a version build.
 * Human cleanup of release folder is required in order to rebuild a version.
 *
 * @param requestVersion The version attempting to be released 0.3.0
 * @param gitSha The git commit sha.  This can be shorthand (ex. 0e1)
 */
@main
def release(requestVersion: String, gitSha: String): Unit = {

  println(s"Releasing version: $requestVersion")
  %('git, "checkout", gitSha)

  val version = build()
  if(version.toString() != requestVersion) {
    throw new IllegalStateException(s"Build version: $version does NOT match requested version: $requestVersion")
  }

  uploadTarballToS3(s"releases/$version")
}
