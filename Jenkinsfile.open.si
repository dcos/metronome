#!/usr/bin/env groovy

timeout(120) {
node('py36') {
  wrap([$class: 'MesosSingleUseSlave']) {
  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm']) {

    properties([
            // once a day between 1 AM and 5 AM
            pipelineTriggers([cron('H H(1-5) * * *')]),
            parameters([
                    string(name: 'channel',
                            defaultValue: 'testing/master',
                            description: 'PR to start the cluster from e.g. testing/pull/1739'
                    )]
            )
    ])

    stage("Run System Integration Test Pipeline") {
      try {
        checkout scm
        withCredentials([
                usernamePassword(credentialsId: 'a7ac7f84-64ea-4483-8e66-bb204484e58f', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USER'),
                string(credentialsId: '3f0dbb48-de33-431f-b91c-2366d2f0e1cf',variable: 'AWS_ACCESS_KEY_ID'),
                string(credentialsId: 'f585ec9a-3c38-4f67-8bdb-79e5d4761937',variable: 'AWS_SECRET_ACCESS_KEY')
            ]) {
            sh """./ci/si_provision.sh"""
            sh """./ci/si_pipeline.sh $params.channel open"""
          }
        } catch (Exception e) {
            currentBuild.result = 'FAILURE'
            slackSend(
                message: "(;¬_¬) SI tests for Metronome (Open) failed in build `${env.BUILD_NUMBER}`. (<${env.BUILD_URL}|Open>)",
                color: "danger",
                channel: "#metronome-internal",
                tokenCredentialId: "4a6636e5-452e-41d2-aea3-9f28448196f3")
        } finally {
            junit allowEmptyResults: true, testResults: "**/shakedown.xml"
            archive includes: "diagnostics.zip"
        }
    }
  }
  }
}
}
